var findMostAdvantageousJump = function (array) {
    // Determines the most advantageous jump.
    // Defaults to the smallest index.
    return array.reduce(function (acc, element, index) {
        if (element + index + 1 > acc.index + acc.element) {
            return {
                index: index + 1,
                element: element,
            };
        }
        return acc;
    }, { index: 1, element: array[0] });
};
// Recursively determine if end can be reached from the current position
function canJump(nums) {
    // Base Case: array length = 1 or the current element can reach the end
    if (nums.length === 1 || nums[0] >= nums.length - 1) {
        return true;
    }
    // Prevent endless loop
    if (nums[0] === 0) {
        return false;
    }
    // Determine the maximum number of jumps possible
    var maxJumps = nums[0];
    // Get the best element for the next jump
    var inputArray = nums.slice(1, maxJumps + 1);
    var bestIndex = findMostAdvantageousJump(inputArray).index;
    // Greedily get the next subarray
    var subArray = nums.slice(Math.max(bestIndex, 1));
    // Recursively run the function
    return canJump(subArray);
}
console.log('canJump([2,8,1,1,4])', canJump([2, 8, 1, 1, 4])); // true
console.log('canJump([4,4])', canJump([2, 3, 1, 1, 4])); // true
console.log('canJump([3,2,1,0,4])', canJump([3, 2, 1, 0, 4])); // false
console.log('canJump([2,0,0])', canJump([2, 0, 0])); // true
console.log('canJump([2,5,0,0])', canJump([2, 5, 0, 0])); // true
console.log('canJump([1,2,3])', canJump([1, 2, 3])); // true
console.log('canJump([3,0,8,2,0,0,1])', canJump([3, 0, 8, 2, 0, 0, 1])); // true
var long = [
    6,
    8,
    1,
    9,
    1,
    10,
    5,
    10,
    4,
    6,
    5,
    2,
    9,
    8,
    10,
    6,
    1,
    3,
    7,
    8,
    4,
    3,
    3,
    9,
    4,
    5,
    6,
    6,
    3,
    5,
    4,
    4,
    7,
    5,
    10,
    5,
    7,
    10,
    4,
    2,
    1,
    2,
    5,
    10,
    9,
    8,
    2,
    6,
    7,
    6,
    7,
    2,
    1,
    7,
    2,
    1,
    1,
    9,
    9,
    7,
    9,
    9,
    7,
    4,
    2,
    6,
    9,
    8,
    4,
    1,
    3,
    5,
    5,
    9,
    9,
    3,
    7,
    4,
    3,
    7,
    9,
    4,
    5,
    2,
    10,
    1,
    9,
    2,
    7,
    3,
    3,
    4,
    2,
    2,
    4,
    6,
    9,
    6,
    3,
    6,
    2,
    2,
    1,
    5,
    4,
    1,
    7,
    8,
    8,
    6,
    8,
    10,
    3,
    2,
    3,
    3,
    8,
    4,
    3,
    8,
    1,
    7,
    10,
    3,
    6,
    5,
    5,
    6,
    1,
    9,
    6,
    4,
    9,
    9,
    2,
    3,
    7,
    4,
    5,
    8,
    1,
    7,
    10,
    5,
    5,
    7,
    2,
    3,
    3,
    1,
    4,
    6,
    7,
    8,
    6,
    2,
    5,
    7,
    9,
    3,
    6,
    9,
    1,
    4,
    1,
    1,
    1,
    4,
    9,
    6,
    1,
    2,
    9,
    4,
    8,
    1,
    10,
    1,
    7,
    5,
    6,
    3,
    2,
    7,
    1,
    2,
    2,
    4,
    8,
    1,
    8,
    8,
    9,
    4,
    9,
    9,
    1,
    3,
    6,
    2,
    6,
    4,
    8,
    8,
    8,
    2,
    6,
    6,
    9,
    2,
    2,
    4,
    1,
    1,
    1,
    10,
    7,
    9,
    2,
    7,
    3,
    4,
    10,
    2,
    4,
    8,
    5,
    6,
    4,
    5,
    6,
    3,
    8,
    8,
    1,
    2,
    10,
    2,
    1,
    6,
    6,
    10,
    8,
    10,
    5,
    8,
    5,
    1,
    8,
    8,
    4,
    9,
    5,
    7,
    8,
    6,
    8,
    7,
    9,
    9,
    1,
    6,
    2,
    5,
    6,
    2,
    1,
    4,
    4,
    2,
    7,
    1,
    9,
    9,
    1,
    10,
    9,
    5,
    9,
    4,
    9,
    5,
    7,
    10,
    4,
    5,
    7,
    9,
    10,
    7,
    3,
    5,
    3,
    1,
    5,
    5,
    10,
    1,
    6,
    1,
    2,
    9,
    1,
    4,
    10,
    8,
    3,
    10,
    3,
    5,
    6,
    4,
    4,
    3,
    10,
    2,
    6,
    8,
    7,
    7,
    5,
    7,
    8,
    3,
    7,
    4,
    6,
    5,
    10,
    7,
    3,
    8,
    8,
    7,
    9,
    3,
    4,
    8,
    7,
    1,
    9,
    1,
    3,
    4,
    6,
    2,
    10,
    3,
    9,
    10,
    3,
    2,
    5,
    4,
];
console.log('canJump(VERY LONG)', canJump(long)); // true
